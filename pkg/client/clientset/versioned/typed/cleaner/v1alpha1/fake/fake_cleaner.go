// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/akaimo/job-observer/pkg/apis/cleaner/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCleaners implements CleanerInterface
type FakeCleaners struct {
	Fake *FakeJobObserverV1alpha1
	ns   string
}

var cleanersResource = schema.GroupVersionResource{Group: "job-observer.akaimo.com", Version: "v1alpha1", Resource: "cleaners"}

var cleanersKind = schema.GroupVersionKind{Group: "job-observer.akaimo.com", Version: "v1alpha1", Kind: "Cleaner"}

// Get takes name of the cleaner, and returns the corresponding cleaner object, and an error if there is any.
func (c *FakeCleaners) Get(name string, options v1.GetOptions) (result *v1alpha1.Cleaner, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(cleanersResource, c.ns, name), &v1alpha1.Cleaner{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cleaner), err
}

// List takes label and field selectors, and returns the list of Cleaners that match those selectors.
func (c *FakeCleaners) List(opts v1.ListOptions) (result *v1alpha1.CleanerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(cleanersResource, cleanersKind, c.ns, opts), &v1alpha1.CleanerList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.CleanerList{ListMeta: obj.(*v1alpha1.CleanerList).ListMeta}
	for _, item := range obj.(*v1alpha1.CleanerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cleaners.
func (c *FakeCleaners) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(cleanersResource, c.ns, opts))

}

// Create takes the representation of a cleaner and creates it.  Returns the server's representation of the cleaner, and an error, if there is any.
func (c *FakeCleaners) Create(cleaner *v1alpha1.Cleaner) (result *v1alpha1.Cleaner, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(cleanersResource, c.ns, cleaner), &v1alpha1.Cleaner{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cleaner), err
}

// Update takes the representation of a cleaner and updates it. Returns the server's representation of the cleaner, and an error, if there is any.
func (c *FakeCleaners) Update(cleaner *v1alpha1.Cleaner) (result *v1alpha1.Cleaner, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(cleanersResource, c.ns, cleaner), &v1alpha1.Cleaner{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cleaner), err
}

// Delete takes name of the cleaner and deletes it. Returns an error if one occurs.
func (c *FakeCleaners) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(cleanersResource, c.ns, name), &v1alpha1.Cleaner{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCleaners) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(cleanersResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.CleanerList{})
	return err
}

// Patch applies the patch and returns the patched cleaner.
func (c *FakeCleaners) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Cleaner, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(cleanersResource, c.ns, name, pt, data, subresources...), &v1alpha1.Cleaner{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cleaner), err
}
