// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/akaimo/job-observer/pkg/apis/cleaner/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotificatorLister helps list Notificators.
type NotificatorLister interface {
	// List lists all Notificators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Notificator, err error)
	// Notificators returns an object that can list and get Notificators.
	Notificators(namespace string) NotificatorNamespaceLister
	NotificatorListerExpansion
}

// notificatorLister implements the NotificatorLister interface.
type notificatorLister struct {
	indexer cache.Indexer
}

// NewNotificatorLister returns a new NotificatorLister.
func NewNotificatorLister(indexer cache.Indexer) NotificatorLister {
	return &notificatorLister{indexer: indexer}
}

// List lists all Notificators in the indexer.
func (s *notificatorLister) List(selector labels.Selector) (ret []*v1alpha1.Notificator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Notificator))
	})
	return ret, err
}

// Notificators returns an object that can list and get Notificators.
func (s *notificatorLister) Notificators(namespace string) NotificatorNamespaceLister {
	return notificatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificatorNamespaceLister helps list and get Notificators.
type NotificatorNamespaceLister interface {
	// List lists all Notificators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Notificator, err error)
	// Get retrieves the Notificator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Notificator, error)
	NotificatorNamespaceListerExpansion
}

// notificatorNamespaceLister implements the NotificatorNamespaceLister
// interface.
type notificatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Notificators in the indexer for a given namespace.
func (s notificatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Notificator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Notificator))
	})
	return ret, err
}

// Get retrieves the Notificator from the indexer for a given namespace and name.
func (s notificatorNamespaceLister) Get(name string) (*v1alpha1.Notificator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificator"), name)
	}
	return obj.(*v1alpha1.Notificator), nil
}
