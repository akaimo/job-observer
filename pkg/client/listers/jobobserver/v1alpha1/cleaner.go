// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/akaimo/job-observer/pkg/apis/jobobserver/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CleanerLister helps list Cleaners.
type CleanerLister interface {
	// List lists all Cleaners in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Cleaner, err error)
	// Cleaners returns an object that can list and get Cleaners.
	Cleaners(namespace string) CleanerNamespaceLister
	CleanerListerExpansion
}

// cleanerLister implements the CleanerLister interface.
type cleanerLister struct {
	indexer cache.Indexer
}

// NewCleanerLister returns a new CleanerLister.
func NewCleanerLister(indexer cache.Indexer) CleanerLister {
	return &cleanerLister{indexer: indexer}
}

// List lists all Cleaners in the indexer.
func (s *cleanerLister) List(selector labels.Selector) (ret []*v1alpha1.Cleaner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cleaner))
	})
	return ret, err
}

// Cleaners returns an object that can list and get Cleaners.
func (s *cleanerLister) Cleaners(namespace string) CleanerNamespaceLister {
	return cleanerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CleanerNamespaceLister helps list and get Cleaners.
type CleanerNamespaceLister interface {
	// List lists all Cleaners in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Cleaner, err error)
	// Get retrieves the Cleaner from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Cleaner, error)
	CleanerNamespaceListerExpansion
}

// cleanerNamespaceLister implements the CleanerNamespaceLister
// interface.
type cleanerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Cleaners in the indexer for a given namespace.
func (s cleanerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Cleaner, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cleaner))
	})
	return ret, err
}

// Get retrieves the Cleaner from the indexer for a given namespace and name.
func (s cleanerNamespaceLister) Get(name string) (*v1alpha1.Cleaner, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cleaner"), name)
	}
	return obj.(*v1alpha1.Cleaner), nil
}
